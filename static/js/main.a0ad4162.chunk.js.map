{"version":3,"sources":["components/Event/Event.component.js","components/Event/EventList.component.js","components/CitySearch/CitySearch.component.js","components/Event/NumberOfEvents.component.js","App.js","serviceWorker.js","index.js"],"names":["Event","handleShowDetails","setState","showDetails","state","event","this","className","name","local_date","onClick","description","Component","EventList","events","map","key","id","CitySearch","handleInputChanged","value","target","query","handleItemClicked","suggestions","type","onChange","item","name_string","NumberOfEvents","numberOfEvents","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"ySAuCeA,G,wBAlCb,aAAe,IAAD,8BACZ,+CAMFC,kBAAoB,WAClB,EAAKC,SAAS,CAAEC,aAAa,KAN7B,EAAKC,MAAQ,CACXC,MAAO,GACPF,aAAa,GAJH,E,sEAWJ,IAAD,SACwBG,KAAKF,MAA5BC,EADD,EACCA,MAAOF,EADR,EACQA,YACf,OACE,yBAAKI,UAAU,SACb,wBAAIA,UAAU,cAAcF,EAAMG,MAClC,yBAAKD,UAAU,cAAf,SAAmCF,EAAMI,YACzC,4BACEF,UAAU,eACVG,QAAS,kBAAM,EAAKT,sBAEnBE,EAAc,eAAiB,gBAGjCA,GACC,yBAAKI,UAAU,iBACb,yBAAKA,UAAU,gBAAf,gBAA4CF,EAAMM,mB,GA3B1CC,cCsBLC,E,YArBb,aAAe,IAAD,8BACZ,+CAEKT,MAAQ,CACXU,OAAQ,IAJE,E,sEAQOR,KAAKF,MAAhBU,OACR,OACE,wBAAIP,UAAU,cACXD,KAAKF,MAAMU,OAAOC,KAAI,SAAAV,GAAK,OAC1B,wBAAIW,IAAKX,EAAMY,IACb,kBAAC,EAAD,CAAOZ,MAAOA,a,GAdFO,aC2CTM,G,kBA1Cb,aAAe,IAAD,8BACZ,+CAOFC,mBAAqB,SAAAd,GACnB,IAAMe,EAAQf,EAAMgB,OAAOD,MAC3B,EAAKlB,SAAS,CAAEoB,MAAOF,KAVX,EAadG,kBAAoB,SAAAH,GAClB,EAAKlB,SAAS,CAAEoB,MAAOF,KAZvB,EAAKhB,MAAQ,CACXkB,MAAO,GACPE,YAAa,IAJH,E,sEAiBJ,IAAD,SACwBlB,KAAKF,MAA5BkB,EADD,EACCA,MAAOE,EADR,EACQA,YACf,OACE,yBAAKjB,UAAU,eACb,2BACEkB,KAAK,OACLlB,UAAU,OACVa,MAAOE,EACPI,SAAUpB,KAAKa,qBAEjB,wBAAIZ,UAAU,eACXiB,EAAYT,KAAI,SAAAY,GAAI,OACnB,wBACEX,IAAKW,EAAKC,YACVlB,QAAS,kBAAM,EAAKa,kBAAkBI,EAAKC,eAE1CD,EAAKC,sB,GAlCKhB,cCwBViB,E,YA1Bb,aAAe,IAAD,8BACZ,+CAKFV,mBAAqB,SAAAd,GACnB,IAAMe,EAAQf,EAAMgB,OAAOD,MAC3B,EAAKlB,SAAS,CAAE4B,eAAgBV,KANhC,EAAKhB,MAAQ,CACX0B,eAAgB,IAHN,E,sEAUJ,IACAA,EAAmBxB,KAAKF,MAAxB0B,eACR,OACE,yBAAKvB,UAAU,oBACb,gDACA,2BACEkB,KAAK,OACLlB,UAAU,0BACVa,MAAOU,EACPJ,SAAUpB,KAAKa,0B,GApBIP,aCiBdmB,E,iLAVX,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANUK,aCMEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a0ad4162.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport \"./Event.styles.css\";\n\nclass Event extends Component {\n  constructor() {\n    super();\n    this.state = {\n      event: {},\n      showDetails: false,\n    };\n  }\n  handleShowDetails = () => {\n    this.setState({ showDetails: true });\n  };\n\n  render() {\n    const { event, showDetails } = this.state;\n    return (\n      <div className=\"event\">\n        <h3 className=\"event_name\">{event.name}</h3>\n        <div className=\"event_date\">Date: {event.local_date}</div>\n        <button\n          className=\"event_button\"\n          onClick={() => this.handleShowDetails()}\n        >\n          {showDetails ? \"Hide details\" : \"Show details\"}\n        </button>\n\n        {showDetails && (\n          <div className=\"event_details\">\n            <div className=\"event_status\">Description: {event.description}</div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default Event;\n","import React, { Component } from \"react\";\n\nimport Event from \"./Event.component\";\n\nclass EventList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      events: [],\n    };\n  }\n  render() {\n    const { events } = this.state;\n    return (\n      <ul className=\"event-list\">\n        {this.state.events.map(event => (\n          <li key={event.id}>\n            <Event event={event} />\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;\n","import React, { Component } from \"react\";\n\nimport \"./CitySearch.styles.css\";\n\nclass CitySearch extends Component {\n  constructor() {\n    super();\n    this.state = {\n      query: \"\",\n      suggestions: [],\n    };\n  }\n\n  handleInputChanged = event => {\n    const value = event.target.value;\n    this.setState({ query: value });\n  };\n\n  handleItemClicked = value => {\n    this.setState({ query: value });\n  };\n\n  render() {\n    const { query, suggestions } = this.state;\n    return (\n      <div className=\"city_search\">\n        <input\n          type=\"text\"\n          className=\"city\"\n          value={query}\n          onChange={this.handleInputChanged}\n        />\n        <ul className=\"suggestions\">\n          {suggestions.map(item => (\n            <li\n              key={item.name_string}\n              onClick={() => this.handleItemClicked(item.name_string)}\n            >\n              {item.name_string}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;\n","import React, { Component } from \"react\";\nclass NumberOfEvents extends Component {\n  constructor() {\n    super();\n    this.state = {\n      numberOfEvents: 32,\n    };\n  }\n  handleInputChanged = event => {\n    const value = event.target.value;\n    this.setState({ numberOfEvents: value });\n  };\n  render() {\n    const { numberOfEvents } = this.state;\n    return (\n      <div className=\"number_of_events\">\n        <h3>Number of Events</h3>\n        <input\n          type=\"text\"\n          className=\"number_of_events__input\"\n          value={numberOfEvents}\n          onChange={this.handleInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport EventList from \"./components/Event/EventList.component\";\nimport CitySearch from \"./components/CitySearch/CitySearch.component\";\nimport NumberOfEvents from \"./components/Event/NumberOfEvents.component\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"app\">\n        <CitySearch />\n        <EventList />\n        <NumberOfEvents />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}